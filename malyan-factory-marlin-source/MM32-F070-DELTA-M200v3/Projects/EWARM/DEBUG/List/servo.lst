###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         10/Oct/2019  17:32:54
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\src\marlin\servo.cpp
#    Command line =
#        -f C:\Users\yongzong\AppData\Local\Temp\EWC3C.tmp
#        (D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\src\marlin\servo.cpp
#        -D USE_STDPERIPH_DRIVER -D USE_STM32072B_EVAL -D STM32F072 -lcN
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\List
#        -o
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\Obj
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\ -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\fs\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\js\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\marlin\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\rtt\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\usb\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\CMSIS\Device\ST\STM32F0xx\Include\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Driver\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\hid\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\cdc_msc_wrapper\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc\
#        -Ohz --c++ --no_exceptions --no_rtti --no_static_destruction -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\" --relaxed_fp)
#    Locale       =  C
#    List file    =
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\List\servo.lst
#    Object file  =
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\Obj\servo.o
#
###############################################################################

D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\src\marlin\servo.cpp
      1          /*
      2           servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2
      3           Copyright (c) 2009 Michael Margolis.  All right reserved.
      4          
      5           This library is free software; you can redistribute it and/or
      6           modify it under the terms of the GNU Lesser General Public
      7           License as published by the Free Software Foundation; either
      8           version 2.1 of the License, or (at your option) any later version.
      9          
     10           This library is distributed in the hope that it will be useful,
     11           but WITHOUT ANY WARRANTY; without even the implied warranty of
     12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     13           Lesser General Public License for more details.
     14          
     15           You should have received a copy of the GNU Lesser General Public
     16           License along with this library; if not, write to the Free Software
     17           Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     18           */
     19          
     20          /*
     21          
     22           A servo is activated by creating an instance of the Servo class passing the desired pin to the attach() method.
     23           The servos are pulsed in the background using the value most recently written using the write() method
     24          
     25           Note that analogWrite of PWM on pins associated with the timer are disabled when the first servo is attached.
     26           Timers are seized as needed in groups of 12 servos - 24 servos use two timers, 48 servos will use four.
     27          
     28           The methods are:
     29          
     30           Servo - Class for manipulating servo motors connected to Arduino pins.
     31          
     32           attach(pin )  - Attaches a servo motor to an i/o pin.
     33           attach(pin, min, max  ) - Attaches to a pin setting min and max values in microseconds
     34           default min is 544, max is 2400
     35          
     36           write()     - Sets the servo angle in degrees.  (invalid angle that is valid as pulse in microseconds is treated as microseconds)
     37           writeMicroseconds() - Sets the servo pulse width in microseconds
     38           move(pin, angle) - Sequence of attach(pin), write(angle).
     39                              With DEACTIVATE_SERVOS_AFTER_MOVE it waits SERVO_DEACTIVATION_DELAY and detaches.
     40           read()      - Gets the last written servo pulse width as an angle between 0 and 180.
     41           readMicroseconds()   - Gets the last written servo pulse width in microseconds. (was read_us() in first release)
     42           attached()  - Returns true if there is a servo attached.
     43           detach()    - Stops an attached servos from pulsing its i/o pin.
     44          
     45          */
     46          #include "Configuration.h"
     47          
     48          #if HAS_SERVOS
     49          
     50          #include <avr/interrupt.h>
     51          #include <Arduino.h>
     52          
     53          #include "servo.h"
     54          
     55          #define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009
     56          #define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds
     57          
     58          #define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009
     59          
     60          //#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)
     61          
     62          static ServoInfo_t servo_info[MAX_SERVOS];                  // static array of servo info structures
     63          static volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)
     64          
     65          uint8_t ServoCount = 0;                                     // the total number of attached servos
     66          
     67          
     68          // convenience macros
     69          #define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo
     70          #define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer
     71          #define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel
     72          #define SERVO(_timer,_channel)  (servo_info[SERVO_INDEX(_timer,_channel)])       // macro to access servo class by timer and channel
     73          
     74          #define SERVO_MIN() (MIN_PULSE_WIDTH - this->min * 4)  // minimum value in uS for this servo
     75          #define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo
     76          
     77          /************ static functions common to all instances ***********************/
     78          
     79          static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t* TCNTn, volatile uint16_t* OCRnA) {
     80            if (Channel[timer] < 0)
     81              *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     82            else {
     83              if (SERVO_INDEX(timer, Channel[timer]) < ServoCount && SERVO(timer, Channel[timer]).Pin.isActive)
     84                digitalWrite(SERVO(timer, Channel[timer]).Pin.nbr, LOW); // pulse this channel low if activated
     85            }
     86          
     87            Channel[timer]++;    // increment to the next channel
     88            if (SERVO_INDEX(timer, Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     89              *OCRnA = *TCNTn + SERVO(timer, Channel[timer]).ticks;
     90              if (SERVO(timer, Channel[timer]).Pin.isActive)    // check if activated
     91                digitalWrite(SERVO(timer, Channel[timer]).Pin.nbr, HIGH); // its an active channel so pulse it high
     92            }
     93            else {
     94              // finished all channels so wait for the refresh period to expire before starting over
     95              if (((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL))    // allow a few ticks to ensure the next OCR1A not missed
     96                *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     97              else
     98                *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     99              Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    100            }
    101          }
    102          
    103          #ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
    104          
    105            // Interrupt handlers for Arduino
    106            #if ENABLED(_useTimer1)
    107              SIGNAL (TIMER1_COMPA_vect) { handle_interrupts(_timer1, &TCNT1, &OCR1A); }
    108            #endif
    109          
    110            #if ENABLED(_useTimer3)
    111              SIGNAL (TIMER3_COMPA_vect) { handle_interrupts(_timer3, &TCNT3, &OCR3A); }
    112            #endif
    113          
    114            #if ENABLED(_useTimer4)
    115              SIGNAL (TIMER4_COMPA_vect) { handle_interrupts(_timer4, &TCNT4, &OCR4A); }
    116            #endif
    117          
    118            #if ENABLED(_useTimer5)
    119              SIGNAL (TIMER5_COMPA_vect) { handle_interrupts(_timer5, &TCNT5, &OCR5A); }
    120            #endif
    121          
    122          #else //!WIRING
    123          
    124            // Interrupt handlers for Wiring
    125            #if ENABLED(_useTimer1)
    126              void Timer1Service() { handle_interrupts(_timer1, &TCNT1, &OCR1A); }
    127            #endif
    128            #if ENABLED(_useTimer3)
    129              void Timer3Service() { handle_interrupts(_timer3, &TCNT3, &OCR3A); }
    130            #endif
    131          
    132          #endif //!WIRING
    133          
    134          
    135          static void initISR(timer16_Sequence_t timer) {
    136            #if ENABLED(_useTimer1)
    137              if (timer == _timer1) {
    138                TCCR1A = 0;             // normal counting mode
    139                TCCR1B = _BV(CS11);     // set prescaler of 8
    140                TCNT1 = 0;              // clear the timer count
    141                #if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    142                  TIFR |= _BV(OCF1A);      // clear any pending interrupts;
    143                  TIMSK |= _BV(OCIE1A);    // enable the output compare interrupt
    144                #else
    145                  // here if not ATmega8 or ATmega128
    146                  TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;
    147                  TIMSK1 |= _BV(OCIE1A);   // enable the output compare interrupt
    148                #endif
    149                #ifdef WIRING
    150                  timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);
    151                #endif
    152              }
    153            #endif
    154          
    155            #if ENABLED(_useTimer3)
    156              if (timer == _timer3) {
    157                TCCR3A = 0;             // normal counting mode
    158                TCCR3B = _BV(CS31);     // set prescaler of 8
    159                TCNT3 = 0;              // clear the timer count
    160                #ifdef __AVR_ATmega128__
    161                  TIFR |= _BV(OCF3A);     // clear any pending interrupts;
    162                  ETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt
    163                #else
    164                  TIFR3 = _BV(OCF3A);     // clear any pending interrupts;
    165                  TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt
    166                #endif
    167                #ifdef WIRING
    168                  timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only
    169                #endif
    170              }
    171            #endif
    172          
    173            #if ENABLED(_useTimer4)
    174              if (timer == _timer4) {
    175                TCCR4A = 0;             // normal counting mode
    176                TCCR4B = _BV(CS41);     // set prescaler of 8
    177                TCNT4 = 0;              // clear the timer count
    178                TIFR4 = _BV(OCF4A);     // clear any pending interrupts;
    179                TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt
    180              }
    181            #endif
    182          
    183            #if ENABLED(_useTimer5)
    184              if (timer == _timer5) {
    185                TCCR5A = 0;             // normal counting mode
    186                TCCR5B = _BV(CS51);     // set prescaler of 8
    187                TCNT5 = 0;              // clear the timer count
    188                TIFR5 = _BV(OCF5A);     // clear any pending interrupts;
    189                TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt
    190              }
    191            #endif
    192          }
    193          
    194          static void finISR(timer16_Sequence_t timer) {
    195            // Disable use of the given timer
    196            #ifdef WIRING
    197              if (timer == _timer1) {
    198                #if defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2561__)
    199                  TIMSK1
    200                #else
    201                  TIMSK
    202                #endif
    203                    &= ~_BV(OCIE1A);    // disable timer 1 output compare interrupt
    204                timerDetach(TIMER1OUTCOMPAREA_INT);
    205              }
    206              else if (timer == _timer3) {
    207                #if defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2561__)
    208                  TIMSK3
    209                #else
    210                  ETIMSK
    211                #endif
    212                    &= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt
    213                timerDetach(TIMER3OUTCOMPAREA_INT);
    214              }
    215            #else //!WIRING
    216              // For arduino - in future: call here to a currently undefined function to reset the timer
    217            #endif
    218          }
    219          
    220          static boolean isTimerActive(timer16_Sequence_t timer) {
    221            // returns true if any servo is active on this timer
    222            for (uint8_t channel = 0; channel < SERVOS_PER_TIMER; channel++) {
    223              if (SERVO(timer, channel).Pin.isActive)
    224                return true;
    225            }
    226            return false;
    227          }
    228          
    229          
    230          /****************** end of static functions ******************************/
    231          
    232          Servo::Servo() {
    233            if (ServoCount < MAX_SERVOS) {
    234              this->servoIndex = ServoCount++;                    // assign a servo index to this instance
    235              servo_info[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
    236            }
    237            else
    238              this->servoIndex = INVALID_SERVO;  // too many servos
    239          }
    240          
    241          int8_t Servo::attach(int pin) {
    242            return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    243          }
    244          
    245          int8_t Servo::attach(int pin, int min, int max) {
    246          
    247            if (this->servoIndex >= MAX_SERVOS) return -1;
    248          
    249            if (pin > 0) servo_info[this->servoIndex].Pin.nbr = pin;
    250            pinMode(servo_info[this->servoIndex].Pin.nbr, OUTPUT); // set servo pin to output
    251          
    252            // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    253            this->min = (MIN_PULSE_WIDTH - min) / 4; //resolution of min/max is 4 uS
    254            this->max = (MAX_PULSE_WIDTH - max) / 4;
    255          
    256            // initialize the timer if it has not already been initialized
    257            timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    258            if (!isTimerActive(timer)) initISR(timer);
    259            servo_info[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    260          
    261            return this->servoIndex;
    262          }
    263          
    264          void Servo::detach() {
    265            servo_info[this->servoIndex].Pin.isActive = false;
    266            timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    267            if (!isTimerActive(timer)) finISR(timer);
    268          }
    269          
    270          void Servo::write(int value) {
    271            if (value < MIN_PULSE_WIDTH) { // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    272              if (value < 0) value = 0;
    273              if (value > 180) value = 180;
    274              value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    275            }
    276            this->writeMicroseconds(value);
    277          }
    278          
    279          void Servo::writeMicroseconds(int value) {
    280            // calculate and store the values for the given channel
    281            byte channel = this->servoIndex;
    282            if (channel < MAX_SERVOS) {  // ensure channel is valid
    283              if (value < SERVO_MIN())   // ensure pulse width is valid
    284                value = SERVO_MIN();
    285              else if (value > SERVO_MAX())
    286                value = SERVO_MAX();
    287          
    288              value = value - TRIM_DURATION;
    289              value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    290          
    291              uint8_t oldSREG = SREG;
    292              cli();
    293              servo_info[channel].ticks = value;
    294              SREG = oldSREG;
    295            }
    296          }
    297          
    298          // return the value as degrees
    299          int Servo::read() { return map(this->readMicroseconds() + 1, SERVO_MIN(), SERVO_MAX(), 0, 180); }
    300          
    301          int Servo::readMicroseconds() {
    302            return (this->servoIndex == INVALID_SERVO) ? 0 : ticksToUs(servo_info[this->servoIndex].ticks) + TRIM_DURATION;
    303          }
    304          
    305          bool Servo::attached() { return servo_info[this->servoIndex].Pin.isActive; }
    306          
    307          void Servo::move(int value) {
    308            if (this->attach(0) >= 0) {
    309              this->write(value);
    310              #if ENABLED(DEACTIVATE_SERVOS_AFTER_MOVE)
    311                delay(SERVO_DEACTIVATION_DELAY);
    312                this->detach();
    313              #endif
    314            }
    315          }
    316          
    317          #endif


 
 
 0 bytes of memory

Errors: none
Warnings: 5
