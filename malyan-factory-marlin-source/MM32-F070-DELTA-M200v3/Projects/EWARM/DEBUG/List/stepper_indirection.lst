###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         10/Oct/2019  17:32:54
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\src\marlin\stepper_indirection.cpp
#    Command line =
#        -f C:\Users\yongzong\AppData\Local\Temp\EWD86.tmp
#        (D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\src\marlin\stepper_indirection.cpp
#        -D USE_STDPERIPH_DRIVER -D USE_STM32072B_EVAL -D STM32F072 -lcN
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\List
#        -o
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\Obj
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\ -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\fs\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\js\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\marlin\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\rtt\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\src\usb\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\CMSIS\Device\ST\STM32F0xx\Include\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Driver\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\hid\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\cdc_msc_wrapper\inc\
#        -I
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc\
#        -Ohz --c++ --no_exceptions --no_rtti --no_static_destruction -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\" --relaxed_fp)
#    Locale       =  C
#    List file    =
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\List\stepper_indirection.lst
#    Object file  =
#        D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\EWARM\DEBUG\Obj\stepper_indirection.o
#
###############################################################################

D:\Projects\3DPrint\SRC\MM32-F070-DELTA-M200v3\Projects\src\marlin\stepper_indirection.cpp
      1          /*
      2            stepper_indirection.c - stepper motor driver indirection
      3            to allow some stepper functions to be done via SPI/I2c instead of direct pin manipulation
      4            Part of Marlin
      5          
      6            Copyright (c) 2015 Dominik Wenger
      7          
      8            Marlin is free software: you can redistribute it and/or modify
      9            it under the terms of the GNU General Public License as published by
     10            the Free Software Foundation, either version 3 of the License, or
     11            (at your option) any later version.
     12          
     13            Marlin is distributed in the hope that it will be useful,
     14            but WITHOUT ANY WARRANTY; without even the implied warranty of
     15            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16            GNU General Public License for more details.
     17          
     18            You should have received a copy of the GNU General Public License
     19            along with Marlin.  If not, see <http://www.gnu.org/licenses/>.
     20          */
     21          
     22          #include "stepper_indirection.h"
     23          #include "Configuration.h"
     24          
     25          #if ENABLED(HAVE_TMCDRIVER)
     26            #include <SPI.h>
     27            #include <TMC26XStepper.h>
     28          #endif
     29          
     30          // Stepper objects of TMC steppers used
     31          #if ENABLED(X_IS_TMC)
     32            TMC26XStepper stepperX(200, X_ENABLE_PIN, X_STEP_PIN, X_DIR_PIN, X_MAX_CURRENT, X_SENSE_RESISTOR);
     33          #endif
     34          #if ENABLED(X2_IS_TMC)
     35            TMC26XStepper stepperX2(200, X2_ENABLE_PIN, X2_STEP_PIN, X2_DIR_PIN, X2_MAX_CURRENT, X2_SENSE_RESISTOR);
     36          #endif
     37          #if ENABLED(Y_IS_TMC)
     38            TMC26XStepper stepperY(200, Y_ENABLE_PIN, Y_STEP_PIN, Y_DIR_PIN, Y_MAX_CURRENT, Y_SENSE_RESISTOR);
     39          #endif
     40          #if ENABLED(Y2_IS_TMC)
     41            TMC26XStepper stepperY2(200, Y2_ENABLE_PIN, Y2_STEP_PIN, Y2_DIR_PIN, Y2_MAX_CURRENT, Y2_SENSE_RESISTOR);
     42          #endif
     43          #if ENABLED(Z_IS_TMC)
     44            TMC26XStepper stepperZ(200, Z_ENABLE_PIN, Z_STEP_PIN, Z_DIR_PIN, Z_MAX_CURRENT, Z_SENSE_RESISTOR);
     45          #endif
     46          #if ENABLED(Z2_IS_TMC)
     47            TMC26XStepper stepperZ2(200, Z2_ENABLE_PIN, Z2_STEP_PIN, Z2_DIR_PIN, Z2_MAX_CURRENT, Z2_SENSE_RESISTOR);
     48          #endif
     49          #if ENABLED(E0_IS_TMC)
     50            TMC26XStepper stepperE0(200, E0_ENABLE_PIN, E0_STEP_PIN, E0_DIR_PIN, E0_MAX_CURRENT, E0_SENSE_RESISTOR);
     51          #endif
     52          #if ENABLED(E1_IS_TMC)
     53            TMC26XStepper stepperE1(200, E1_ENABLE_PIN, E1_STEP_PIN, E1_DIR_PIN, E1_MAX_CURRENT, E1_SENSE_RESISTOR);
     54          #endif
     55          #if ENABLED(E2_IS_TMC)
     56            TMC26XStepper stepperE2(200, E2_ENABLE_PIN, E2_STEP_PIN, E2_DIR_PIN, E2_MAX_CURRENT, E2_SENSE_RESISTOR);
     57          #endif
     58          #if ENABLED(E3_IS_TMC)
     59            TMC26XStepper stepperE3(200, E3_ENABLE_PIN, E3_STEP_PIN, E3_DIR_PIN, E3_MAX_CURRENT, E3_SENSE_RESISTOR);
     60          #endif
     61          
     62          #if ENABLED(HAVE_TMCDRIVER)
     63          void tmc_init() {
     64            #if ENABLED(X_IS_TMC)
     65              stepperX.setMicrosteps(X_MICROSTEPS);
     66              stepperX.start();
     67            #endif
     68            #if ENABLED(X2_IS_TMC)
     69              stepperX2.setMicrosteps(X2_MICROSTEPS);
     70              stepperX2.start();
     71            #endif
     72            #if ENABLED(Y_IS_TMC)
     73              stepperY.setMicrosteps(Y_MICROSTEPS);
     74              stepperY.start();
     75            #endif
     76            #if ENABLED(Y2_IS_TMC)
     77              stepperY2.setMicrosteps(Y2_MICROSTEPS);
     78              stepperY2.start();
     79            #endif
     80            #if ENABLED(Z_IS_TMC)
     81              stepperZ.setMicrosteps(Z_MICROSTEPS);
     82              stepperZ.start();
     83            #endif
     84            #if ENABLED(Z2_IS_TMC)
     85              stepperZ2.setMicrosteps(Z2_MICROSTEPS);
     86              stepperZ2.start();
     87            #endif
     88            #if ENABLED(E0_IS_TMC)
     89              stepperE0.setMicrosteps(E0_MICROSTEPS);
     90              stepperE0.start();
     91            #endif
     92            #if ENABLED(E1_IS_TMC)
     93              stepperE1.setMicrosteps(E1_MICROSTEPS);
     94              stepperE1.start();
     95            #endif
     96            #if ENABLED(E2_IS_TMC)
     97              stepperE2.setMicrosteps(E2_MICROSTEPS);
     98              stepperE2.start();
     99            #endif
    100            #if ENABLED(E3_IS_TMC)
    101              stepperE3.setMicrosteps(E3_MICROSTEPS);
    102              stepperE3.start();
    103            #endif
    104          }
    105          #endif
    106          
    107          // L6470 Driver objects and inits
    108          
    109          #if ENABLED(HAVE_L6470DRIVER)
    110            #include <SPI.h>
    111            #include <L6470.h>
    112          #endif
    113          
    114          // L6470 Stepper objects
    115          #if ENABLED(X_IS_L6470)
    116            L6470 stepperX(X_ENABLE_PIN);
    117          #endif
    118          #if ENABLED(X2_IS_L6470)
    119            L6470 stepperX2(X2_ENABLE_PIN);
    120          #endif
    121          #if ENABLED(Y_IS_L6470)
    122            L6470 stepperY(Y_ENABLE_PIN);
    123          #endif
    124          #if ENABLED(Y2_IS_L6470)
    125            L6470 stepperY2(Y2_ENABLE_PIN);
    126          #endif
    127          #if ENABLED(Z_IS_L6470)
    128            L6470 stepperZ(Z_ENABLE_PIN);
    129          #endif
    130          #if ENABLED(Z2_IS_L6470)
    131            L6470 stepperZ2(Z2_ENABLE_PIN);
    132          #endif
    133          #if ENABLED(E0_IS_L6470)
    134            L6470 stepperE0(E0_ENABLE_PIN);
    135          #endif
    136          #if ENABLED(E1_IS_L6470)
    137            L6470 stepperE1(E1_ENABLE_PIN);
    138          #endif
    139          #if ENABLED(E2_IS_L6470)
    140            L6470 stepperE2(E2_ENABLE_PIN);
    141          #endif
    142          #if ENABLED(E3_IS_L6470)
    143            L6470 stepperE3(E3_ENABLE_PIN);
    144          #endif
    145          
    146          
    147          // init routine
    148          #if ENABLED(HAVE_L6470DRIVER)
    149          void L6470_init() {
    150            #if ENABLED(X_IS_L6470)
    151              stepperX.init(X_K_VAL);
    152              stepperX.softFree();
    153              stepperX.setMicroSteps(X_MICROSTEPS);
    154              stepperX.setOverCurrent(X_OVERCURRENT); //set overcurrent protection
    155              stepperX.setStallCurrent(X_STALLCURRENT);
    156            #endif
    157            #if ENABLED(X2_IS_L6470)
    158              stepperX2.init(X2_K_VAL);
    159              stepperX2.softFree();
    160              stepperX2.setMicroSteps(X2_MICROSTEPS);
    161              stepperX2.setOverCurrent(X2_OVERCURRENT); //set overcurrent protection
    162              stepperX2.setStallCurrent(X2_STALLCURRENT);
    163            #endif
    164            #if ENABLED(Y_IS_L6470)
    165              stepperY.init(Y_K_VAL);
    166              stepperY.softFree();
    167              stepperY.setMicroSteps(Y_MICROSTEPS);
    168              stepperY.setOverCurrent(Y_OVERCURRENT); //set overcurrent protection
    169              stepperY.setStallCurrent(Y_STALLCURRENT);
    170            #endif
    171            #if ENABLED(Y2_IS_L6470)
    172              stepperY2.init(Y2_K_VAL);
    173              stepperY2.softFree();
    174              stepperY2.setMicroSteps(Y2_MICROSTEPS);
    175              stepperY2.setOverCurrent(Y2_OVERCURRENT); //set overcurrent protection
    176              stepperY2.setStallCurrent(Y2_STALLCURRENT);
    177            #endif
    178            #if ENABLED(Z_IS_L6470)
    179              stepperZ.init(Z_K_VAL);
    180              stepperZ.softFree();
    181              stepperZ.setMicroSteps(Z_MICROSTEPS);
    182              stepperZ.setOverCurrent(Z_OVERCURRENT); //set overcurrent protection
    183              stepperZ.setStallCurrent(Z_STALLCURRENT);
    184            #endif
    185            #if ENABLED(Z2_IS_L6470)
    186              stepperZ2.init(Z2_K_VAL);
    187              stepperZ2.softFree();
    188              stepperZ2.setMicroSteps(Z2_MICROSTEPS);
    189              stepperZ2.setOverCurrent(Z2_OVERCURRENT); //set overcurrent protection
    190              stepperZ2.setStallCurrent(Z2_STALLCURRENT);
    191            #endif
    192            #if ENABLED(E0_IS_L6470)
    193              stepperE0.init(E0_K_VAL);
    194              stepperE0.softFree();
    195              stepperE0.setMicroSteps(E0_MICROSTEPS);
    196              stepperE0.setOverCurrent(E0_OVERCURRENT); //set overcurrent protection
    197              stepperE0.setStallCurrent(E0_STALLCURRENT);
    198            #endif
    199            #if ENABLED(E1_IS_L6470)
    200              stepperE1.init(E1_K_VAL);
    201              stepperE1.softFree();
    202              stepperE1.setMicroSteps(E1_MICROSTEPS);
    203              stepperE1.setOverCurrent(E1_OVERCURRENT); //set overcurrent protection
    204              stepperE1.setStallCurrent(E1_STALLCURRENT);
    205            #endif
    206            #if ENABLED(E2_IS_L6470)
    207              stepperE2.init(E2_K_VAL);
    208              stepperE2.softFree();
    209              stepperE2.setMicroSteps(E2_MICROSTEPS);
    210              stepperE2.setOverCurrent(E2_OVERCURRENT); //set overcurrent protection
    211              stepperE2.setStallCurrent(E2_STALLCURRENT);
    212            #endif
    213            #if ENABLED(E3_IS_L6470)
    214              stepperE3.init(E3_K_VAL);
    215              stepperE3.softFree();
    216              stepperE3.setMicroSteps(E3_MICROSTEPS);
    217              stepperE3.setOverCurrent(E3_OVERCURRENT); //set overcurrent protection
    218              stepperE3.setStallCurrent(E3_STALLCURRENT);
    219            #endif
    220          }
    221          #endif
    222          


 
 
 0 bytes of memory

Errors: none
Warnings: 5
